
Перем ИмяФайлаПротокола;
Перем ОбъектЛог;
Перем КорневойКаталогСборок1с;
Перем ИсполнимыйФайлПлатформы;
Перем МинимальнаяВерсияСборки;
Перем ПерезаписыватьФайлПротокола;
Перем ИмяВспомогательнойБазы;

#Область Служебные

    Процедура Лог(Сообщение = "", ЗакрытьЗапись = Ложь)
        
        СтрокаДляВывода = "[ " + Строка(ТекущаяДата()) + " ]: " + Сообщение;

        Если ИмяФайлаПротокола = Неопределено Тогда
        
            Возврат;

        КонецЕсли;		

        Если ОбъектЛог = Неопределено Тогда

            ОбъектЛог = Новый ТекстовыйДокумент();

            Если Не ПерезаписыватьФайлПротокола Тогда

                Если Новый Файл(ИмяФайлаПротокола).Существует() Тогда
                    ОбъектЛог.Прочитать(ИмяФайлаПротокола);
                КонецЕсли;				
    
            КонецЕсли;
            
        КонецЕсли;

        ОбъектЛог.ДобавитьСтроку(СтрокаДляВывода);        
        ОбъектЛог.Записать(ИмяФайлаПротокола);

    КонецПроцедуры

    Процедура Инициализация()

        ПерезаписыватьФайлПротокола = Истина;
        ИмяФайлаПротокола = "D:\log.txt";
        ОбъектЛог = Неопределено;

        КорневойКаталогСборок1с = "C:\Program Files (x86)\1cv8\";
        ИсполнимыйФайлПлатформы = "1cv8.exe";
        МинимальнаяВерсияСборки = "8.3.5.2054";
        ИмяВспомогательнойБазы = "Пустая_база_для_сборки_расборки_внешних_файлов";

        Лог("Начало работы.");

    КонецПроцедуры

    Процедура ЗавершениеРаботы()

        Лог("Завершение работы.");	

    КонецПроцедуры

    Функция СравнитьВерсии(Версия1, Версия2)

        СоставВерсии1 = СтрРазделить(Версия1, ".", Ложь);
        СоставВерсии2 = СтрРазделить(Версия2, ".", Ложь);
    
        Результат = Новый Соответствие();
    
        Если СоставВерсии1.Количество() = СоставВерсии2.Количество() Тогда
            
            Сч = 0;
            Для Каждого Элемент Из СоставВерсии1 Цикл
                
                Попытка
                
                    ЗначениеДляСравненияВерсии1 = Число(Элемент);
                    ЗначениеДляСравненияВерсии2 = Число(СоставВерсии2[Сч]);
                    
                Исключение
                    ТекстОшибки = "Ошибка сравнения версии 1: " + Версия1 + ", с версией 2: " + Версия2; 
                    ВызватьИсключение ТекстОшибки;
                КонецПопытки;
            
                Если ЗначениеДляСравненияВерсии1 > ЗначениеДляСравненияВерсии2 Тогда
    
                    Результат.Вставить(Версия1, 1);
                    Результат.Вставить(Версия2, 0);
                    Прервать;
                ИначеЕсли ЗначениеДляСравненияВерсии1 < ЗначениеДляСравненияВерсии2 Тогда
    
                    Результат.Вставить(Версия1, 0);
                    Результат.Вставить(Версия2, 1);
                    Прервать;
                КонецЕсли; 
    
                Сч = Сч + 1;
            КонецЦикла;	
    
        Иначе
            ТекстОшибки = "Формат версии 1: " + Версия1 + ", не совпадает с форматов версии 2: "+ Версия2; 
            ВызватьИсключение ТекстОшибки;
        КонецЕсли;
    
        Если Не Результат.Количество() Тогда
            Результат.Вставить(Версия1, 0);
            Результат.Вставить(Версия2, 0);
        КонецЕсли;
    
        Возврат Результат;
    
    КонецФункции

    Функция КорректныйНомерВерсии(ПроверяемаяСтрока)
	
        РегулярноеВыражение = Новый РегулярноеВыражение("[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*");
        Возврат РегулярноеВыражение.Совпадает(ПроверяемаяСтрока);
        
    КонецФункции

    Функция КомандаЗапускаПлатформы()

        РезультатПоиска = НайтиФайлы(КорневойКаталогСборок1с, "*", Ложь);
        ВерсияДляЗапуска = "";
    
        Для Каждого Элемент Из РезультатПоиска Цикл
        
            Если Элемент.ЭтоКаталог() Тогда
            
                Если КорректныйНомерВерсии(Элемент.Имя) Тогда
                
                    ИсполнимыйФайлСуществует = Ложь;
                    ВерсияСборкиНеМеньшеТребующейся = Ложь;
                    ПутьКИсполнимомуФайлу = Элемент.Путь + Элемент.Имя + "\bin\";
    
                    Если НайтиФайлы(ПутьКИсполнимомуФайлу, ИсполнимыйФайлПлатформы, Ложь).Количество() Тогда
                    
                        ИсполнимыйФайлСуществует = Истина;
                        РезультатСравнения = СравнитьВерсии(МинимальнаяВерсияСборки, Элемент.Имя);
    
                        Если (РезультатСравнения[МинимальнаяВерсияСборки] = РезультатСравнения[Элемент.Имя]) ИЛИ
                            (РезультатСравнения[МинимальнаяВерсияСборки] < РезультатСравнения[Элемент.Имя]) Тогда
                            
                            Если ВерсияДляЗапуска = "" ИЛИ
                                СравнитьВерсии(ВерсияДляЗапуска, Элемент.Имя)[ВерсияДляЗапуска] <
                                СравнитьВерсии(ВерсияДляЗапуска, Элемент.Имя)[Элемент.Имя] Тогда 
    
                                ВерсияДляЗапуска = Элемент.Имя; 
    
                            КонецЕсли;
                        
                        КонецЕсли;
                        
                    КонецЕсли;
    
                КонецЕсли;
            
            КонецЕсли;
    
        КонецЦикла;
        
        Возврат КорневойКаталогСборок1с + ВерсияДляЗапуска + "\bin\" +ИсполнимыйФайлПлатформы;
    
    КонецФункции

#КонецОбласти

Функция РазобратьАргументыКоманднойСтроки(Знач мАргументыКоманднойСтроки)
    Сч = 0;
    ИсходныйФайл = "";
    ВидОперации = "";
    
    Для каждого Аргумент Из мАргументыКоманднойСтроки Цикл
        
        Если Сч = 0 Тогда
            ВидОперации = Аргумент; 
        ИначеЕсли Сч > 0 Тогда
    
            ИсходныйФайл = ИсходныйФайл + Аргумент;
        
        КонецЕсли;
    
        Сч = Сч + 1;
    
    КонецЦикла;
    
    Если ИсходныйФайл = "" ИЛИ
        ВидОперации = "" Тогда
    
        СообщениеОбОшибке = "Неверные параметры вызова операции.";
        Лог(СообщениеОбОшибке);
        ВызватьИсключение СообщениеОбОшибке; 
    
    КонецЕсли;
    
    Лог("Вид операции: " + ВидОперации);
    Лог("Исходный файл: " + ИсходныйФайл);
    Возврат  Новый Структура("ВидОперации, ИсходныйФайл", ВидОперации, ИсходныйФайл);

КонецФункции

Функция РеквизитыОбъекта(ИсходныйФайл)

    мФайл = Новый Файл(ИсходныйФайл);
    мИмя = мФайл.Имя;
    мИмяБезРасширения = мФайл.ИмяБезРасширения; 
    мПуть = мФайл.Путь;
    
    Лог("Имя: " + мИмя);
    Лог("ИмяБезРасширения: " + мИмяБезРасширения);
    Лог("Путь: " + мПуть);

    Результат = Новый Структура("Имя, ИмяБезРасширения, Путь", мИмя, мИмяБезРасширения, мПуть);
    Возврат Результат;

КонецФункции

Процедура ЭкспортВИсходныйКод(Аргументы)

    РеквизитыОбъекта = РеквизитыОбъекта(Аргументы.ИсходныйФайл); 

    КомандаЗапуска = Символ(34) + 
        КомандаЗапускаПлатформы() + 
		Символ(34) +
		" DESIGNER /IBName " +
		Символ(34) +
		ИмяВспомогательнойБазы + 
		Символ(34) +
		" " +
		"/DumpExternalDataProcessorOrReportToFiles " +
		Символ(34) +
		РеквизитыОбъекта.Путь +
		Символ(34) +
		" " +
		Символ(34) +
		Аргументы.ИсходныйФайл +
		Символ(34) +
		" -Format " +
        "Plain";
    
    Лог("Команда запуска: " + КомандаЗапуска);    

    ЗапуститьПриложение(КомандаЗапуска);
    
КонецПроцедуры

Процедура СобратьВнешнийОбъект(Аргументы)

    РеквизитыОбъекта = РеквизитыОбъекта(Аргументы.ИсходныйФайл); 

    КомандаЗапуска = Символ(34) + 
        КомандаЗапускаПлатформы() + 
		Символ(34) +
		" DESIGNER /IBName " +
		Символ(34) +
		ИмяВспомогательнойБазы + 
		Символ(34) +
		" " +
		"/LoadExternalDataProcessorOrReportFromFiles " +
		Символ(34) +
		Аргументы.ИсходныйФайл +
		Символ(34) +
		" " +
		Символ(34) +
        РеквизитыОбъекта.Путь + 
        РеквизитыОбъекта.ИмяБезРасширения +
        Символ(34);
    
    Лог("Команда запуска: " + КомандаЗапуска);        

    ЗапуститьПриложение(КомандаЗапуска);
    
КонецПроцедуры

Процедура Запуск()

    Аргументы = РазобратьАргументыКоманднойСтроки(АргументыКоманднойСтроки);

    Если Аргументы.ВидОперации = "--Export" Тогда

        Лог("Начало операции --Export.");
        ЭкспортВИсходныйКод(Аргументы);
        Лог("Окончание операции --Export.");

    ИначеЕсли Аргументы.ВидОперации = "--Create" Тогда
        
        Лог("Начало операции --Create.");
        СобратьВнешнийОбъект(Аргументы);
        Лог("Окончание операции --Create.");

    КонецЕсли; 

КонецПроцедуры

Инициализация();
Запуск();        
ЗавершениеРаботы();
